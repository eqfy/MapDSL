// Generated from ./src/app/parser/MapGeneratorLexer.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class MapGeneratorLexer extends Lexer {
	public static readonly WS = 1;
	public static readonly OPEN_CURLY = 2;
	public static readonly CLOSE_CURLY = 3;
	public static readonly OPEN_PAREN = 4;
	public static readonly CLOSE_PAREN = 5;
	public static readonly COMMA = 6;
	public static readonly CHAIN_OP = 7;
	public static readonly EQ = 8;
	public static readonly COORDINATE = 9;
	public static readonly VARIABLE = 10;
	public static readonly CONSTANT = 11;
	public static readonly FUNCTION = 12;
	public static readonly DEFINITIONS = 13;
	public static readonly TO = 14;
	public static readonly FROM = 15;
	public static readonly AT = 16;
	public static readonly HIGHWAY = 17;
	public static readonly STREET = 18;
	public static readonly BRIDGE = 19;
	public static readonly TIMES = 20;
	public static readonly CREATE = 21;
	public static readonly SEMICOLON = 22;
	public static readonly STOP = 23;
	public static readonly TRAIN = 24;
	public static readonly TRAFFIC = 25;
	public static readonly BUS = 26;
	public static readonly SIGN = 27;
	public static readonly LIGHT = 28;
	public static readonly OUTPUT = 29;
	public static readonly END_OUTPUT = 30;
	public static readonly END_DEFINITION = 31;
	public static readonly LOOP = 32;
	public static readonly END_LOOP = 33;
	public static readonly IF = 34;
	public static readonly ELSE_IF = 35;
	public static readonly ELSE = 36;
	public static readonly THEN = 37;
	public static readonly END_IF = 38;
	public static readonly CANVAS = 39;
	public static readonly SIZE = 40;
	public static readonly BY = 41;
	public static readonly POSITIVE_NUMBER = 42;
	public static readonly NEGATIVE_NUMBER = 43;
	public static readonly TRUE = 44;
	public static readonly FALSE = 45;
	public static readonly OPERATOR = 46;
	public static readonly BUS_STOP = 47;
	public static readonly STOP_SIGN = 48;
	public static readonly TRAFFIC_LIGHT = 49;
	public static readonly TRAIN_STOP = 50;
	public static readonly CANVAS_SIZE = 51;
	public static readonly NAME = 52;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"WS", "OPEN_CURLY", "CLOSE_CURLY", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", 
		"CHAIN_OP", "EQ", "COORDINATE", "VARIABLE", "CONSTANT", "FUNCTION", "DEFINITIONS", 
		"TO", "FROM", "AT", "HIGHWAY", "STREET", "BRIDGE", "TIMES", "CREATE", 
		"SEMICOLON", "STOP", "TRAIN", "TRAFFIC", "BUS", "SIGN", "LIGHT", "OUTPUT", 
		"END_OUTPUT", "END_DEFINITION", "LOOP", "END_LOOP", "IF", "ELSE_IF", "ELSE", 
		"THEN", "END_IF", "CANVAS", "SIZE", "BY", "POSITIVE_NUMBER", "NEGATIVE_NUMBER", 
		"TRUE", "FALSE", "OPERATOR", "BUS_STOP", "STOP_SIGN", "TRAFFIC_LIGHT", 
		"TRAIN_STOP", "CANVAS_SIZE", "NAME",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, "'{'", "'}'", "'('", "')'", "','", "'.'", "'='", 
		undefined, "'VARIABLE'", "'CONSTANT'", "'FUNCTION'", "'DEFINITIONS'", 
		"'to'", "'from'", "'at'", "'highway'", "'street'", "'bridge'", "'TIMES'", 
		"'CREATE'", "';'", "'stop'", "'train'", "'traffic'", "'bus'", "'sign'", 
		"'light'", "'OUTPUT'", "'END_OUTPUT'", "'END_DEFINITIONS'", "'LOOP'", 
		"'END_LOOP'", "'IF'", "'ELSE IF'", "'ELSE'", "'THEN'", "'END_IF'", "'CANVAS'", 
		"'SIZE'", "'by'", undefined, undefined, "'true'", "'false'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "WS", "OPEN_CURLY", "CLOSE_CURLY", "OPEN_PAREN", "CLOSE_PAREN", 
		"COMMA", "CHAIN_OP", "EQ", "COORDINATE", "VARIABLE", "CONSTANT", "FUNCTION", 
		"DEFINITIONS", "TO", "FROM", "AT", "HIGHWAY", "STREET", "BRIDGE", "TIMES", 
		"CREATE", "SEMICOLON", "STOP", "TRAIN", "TRAFFIC", "BUS", "SIGN", "LIGHT", 
		"OUTPUT", "END_OUTPUT", "END_DEFINITION", "LOOP", "END_LOOP", "IF", "ELSE_IF", 
		"ELSE", "THEN", "END_IF", "CANVAS", "SIZE", "BY", "POSITIVE_NUMBER", "NEGATIVE_NUMBER", 
		"TRUE", "FALSE", "OPERATOR", "BUS_STOP", "STOP_SIGN", "TRAFFIC_LIGHT", 
		"TRAIN_STOP", "CANVAS_SIZE", "NAME",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(MapGeneratorLexer._LITERAL_NAMES, MapGeneratorLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return MapGeneratorLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(MapGeneratorLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "MapGeneratorLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return MapGeneratorLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return MapGeneratorLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return MapGeneratorLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return MapGeneratorLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x026\u0193\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x03\x02\x06\x02m\n\x02\r\x02\x0E\x02n\x03\x02\x03\x02\x03" +
		"\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v" +
		"\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10" +
		"\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12" +
		"\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15" +
		"\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16" +
		"\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18" +
		"\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A" +
		"\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B" +
		"\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D" +
		"\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E" +
		"\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F" +
		"\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 " +
		"\x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03!\x03!\x03!\x03!\x03!\x03\"\x03" +
		"\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03#\x03#\x03#\x03$\x03$" +
		"\x03$\x03$\x03$\x03$\x03$\x03$\x03%\x03%\x03%\x03%\x03%\x03&\x03&\x03" +
		"&\x03&\x03&\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03(\x03(\x03(\x03" +
		"(\x03(\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x03*\x03*\x03*\x03+\x06+\u0158" +
		"\n+\r+\x0E+\u0159\x03,\x03,\x03,\x03-\x03-\x03-\x03-\x03-\x03.\x03.\x03" +
		".\x03.\x03.\x03.\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03" +
		"/\x03/\x03/\x05/\u0177\n/\x030\x030\x030\x030\x031\x031\x031\x031\x03" +
		"2\x032\x032\x032\x033\x033\x033\x033\x034\x034\x034\x034\x035\x035\x07" +
		"5\u018F\n5\f5\x0E5\u0192\v5\x02\x02\x026\x03\x02\x03\x05\x02\x04\x07\x02" +
		"\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02" +
		"\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12" +
		"#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02" +
		"\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C" +
		"\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(O\x02)Q\x02*S\x02+U\x02,W\x02-Y\x02" +
		".[\x02/]\x020_\x021a\x022c\x023e\x024g\x025i\x026\x03\x02\b\x05\x02\v" +
		"\f\x0F\x0F\"\"\x03\x02z{\x03\x022;\x04\x02>>@@\x04\x02C\\c|\x05\x022;" +
		"C\\c|\x02\u019B\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07" +
		"\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03" +
		"\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03" +
		"\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03" +
		"\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03" +
		"\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02" +
		"\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02" +
		"-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02" +
		"\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02" +
		"\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03" +
		"\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02" +
		"\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02" +
		"O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02" +
		"\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02" +
		"\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03" +
		"\x02\x02\x02\x02e\x03\x02\x02\x02\x02g\x03\x02\x02\x02\x02i\x03\x02\x02" +
		"\x02\x03l\x03\x02\x02\x02\x05r\x03\x02\x02\x02\x07t\x03\x02\x02\x02\t" +
		"v\x03\x02\x02\x02\vx\x03\x02\x02\x02\rz\x03\x02\x02\x02\x0F|\x03\x02\x02" +
		"\x02\x11~\x03\x02\x02\x02\x13\x80\x03\x02\x02\x02\x15\x82\x03\x02\x02" +
		"\x02\x17\x8B\x03\x02\x02\x02\x19\x94\x03\x02\x02\x02\x1B\x9D\x03\x02\x02" +
		"\x02\x1D\xA9\x03\x02\x02\x02\x1F\xAC\x03\x02\x02\x02!\xB1\x03\x02\x02" +
		"\x02#\xB4\x03\x02\x02\x02%\xBC\x03\x02\x02\x02\'\xC3\x03\x02\x02\x02)" +
		"\xCA\x03\x02\x02\x02+\xD0\x03\x02\x02\x02-\xD7\x03\x02\x02\x02/\xD9\x03" +
		"\x02\x02\x021\xDE\x03\x02\x02\x023\xE4\x03\x02\x02\x025\xEC\x03\x02\x02" +
		"\x027\xF0\x03\x02\x02\x029\xF5\x03\x02\x02\x02;\xFB\x03\x02\x02\x02=\u0102" +
		"\x03\x02\x02\x02?\u010D\x03\x02\x02\x02A\u011D\x03\x02\x02\x02C\u0122" +
		"\x03\x02\x02\x02E\u012B\x03\x02\x02\x02G\u012E\x03\x02\x02\x02I\u0136" +
		"\x03\x02\x02\x02K\u013B\x03\x02\x02\x02M\u0140\x03\x02\x02\x02O\u0147" +
		"\x03\x02\x02\x02Q\u014E\x03\x02\x02\x02S\u0153\x03\x02\x02\x02U\u0157" +
		"\x03\x02\x02\x02W\u015B\x03\x02\x02\x02Y\u015E\x03\x02\x02\x02[\u0163" +
		"\x03\x02\x02\x02]\u0176\x03\x02\x02\x02_\u0178\x03\x02\x02\x02a\u017C" +
		"\x03\x02\x02\x02c\u0180\x03\x02\x02\x02e\u0184\x03\x02\x02\x02g\u0188" +
		"\x03\x02\x02\x02i\u018C\x03\x02\x02\x02km\t\x02\x02\x02lk\x03\x02\x02" +
		"\x02mn\x03\x02\x02\x02nl\x03\x02\x02\x02no\x03\x02\x02\x02op\x03\x02\x02" +
		"\x02pq\b\x02\x02\x02q\x04\x03\x02\x02\x02rs\x07}\x02\x02s\x06\x03\x02" +
		"\x02\x02tu\x07\x7F\x02\x02u\b\x03\x02\x02\x02vw\x07*\x02\x02w\n\x03\x02" +
		"\x02\x02xy\x07+\x02\x02y\f\x03\x02\x02\x02z{\x07.\x02\x02{\x0E\x03\x02" +
		"\x02\x02|}\x070\x02\x02}\x10\x03\x02\x02\x02~\x7F\x07?\x02\x02\x7F\x12" +
		"\x03\x02\x02\x02\x80\x81\t\x03\x02\x02\x81\x14\x03\x02\x02\x02\x82\x83" +
		"\x07X\x02\x02\x83\x84\x07C\x02\x02\x84\x85\x07T\x02\x02\x85\x86\x07K\x02" +
		"\x02\x86\x87\x07C\x02\x02\x87\x88\x07D\x02\x02\x88\x89\x07N\x02\x02\x89" +
		"\x8A\x07G\x02\x02\x8A\x16\x03\x02\x02\x02\x8B\x8C\x07E\x02\x02\x8C\x8D" +
		"\x07Q\x02\x02\x8D\x8E\x07P\x02\x02\x8E\x8F\x07U\x02\x02\x8F\x90\x07V\x02" +
		"\x02\x90\x91\x07C\x02\x02\x91\x92\x07P\x02\x02\x92\x93\x07V\x02\x02\x93" +
		"\x18\x03\x02\x02\x02\x94\x95\x07H\x02\x02\x95\x96\x07W\x02\x02\x96\x97" +
		"\x07P\x02\x02\x97\x98\x07E\x02\x02\x98\x99\x07V\x02\x02\x99\x9A\x07K\x02" +
		"\x02\x9A\x9B\x07Q\x02\x02\x9B\x9C\x07P\x02\x02\x9C\x1A\x03\x02\x02\x02" +
		"\x9D\x9E\x07F\x02\x02\x9E\x9F\x07G\x02\x02\x9F\xA0\x07H\x02\x02\xA0\xA1" +
		"\x07K\x02\x02\xA1\xA2\x07P\x02\x02\xA2\xA3\x07K\x02\x02\xA3\xA4\x07V\x02" +
		"\x02\xA4\xA5\x07K\x02\x02\xA5\xA6\x07Q\x02\x02\xA6\xA7\x07P\x02\x02\xA7" +
		"\xA8\x07U\x02\x02\xA8\x1C\x03\x02\x02\x02\xA9\xAA\x07v\x02\x02\xAA\xAB" +
		"\x07q\x02\x02\xAB\x1E\x03\x02\x02\x02\xAC\xAD\x07h\x02\x02\xAD\xAE\x07" +
		"t\x02\x02\xAE\xAF\x07q\x02\x02\xAF\xB0\x07o\x02\x02\xB0 \x03\x02\x02\x02" +
		"\xB1\xB2\x07c\x02\x02\xB2\xB3\x07v\x02\x02\xB3\"\x03\x02\x02\x02\xB4\xB5" +
		"\x07j\x02\x02\xB5\xB6\x07k\x02\x02\xB6\xB7\x07i\x02\x02\xB7\xB8\x07j\x02" +
		"\x02\xB8\xB9\x07y\x02\x02\xB9\xBA\x07c\x02\x02\xBA\xBB\x07{\x02\x02\xBB" +
		"$\x03\x02\x02\x02\xBC\xBD\x07u\x02\x02\xBD\xBE\x07v\x02\x02\xBE\xBF\x07" +
		"t\x02\x02\xBF\xC0\x07g\x02\x02\xC0\xC1\x07g\x02\x02\xC1\xC2\x07v\x02\x02" +
		"\xC2&\x03\x02\x02\x02\xC3\xC4\x07d\x02\x02\xC4\xC5\x07t\x02\x02\xC5\xC6" +
		"\x07k\x02\x02\xC6\xC7\x07f\x02\x02\xC7\xC8\x07i\x02\x02\xC8\xC9\x07g\x02" +
		"\x02\xC9(\x03\x02\x02\x02\xCA\xCB\x07V\x02\x02\xCB\xCC\x07K\x02\x02\xCC" +
		"\xCD\x07O\x02\x02\xCD\xCE\x07G\x02\x02\xCE\xCF\x07U\x02\x02\xCF*\x03\x02" +
		"\x02\x02\xD0\xD1\x07E\x02\x02\xD1\xD2\x07T\x02\x02\xD2\xD3\x07G\x02\x02" +
		"\xD3\xD4\x07C\x02\x02\xD4\xD5\x07V\x02\x02\xD5\xD6\x07G\x02\x02\xD6,\x03" +
		"\x02\x02\x02\xD7\xD8\x07=\x02\x02\xD8.\x03\x02\x02\x02\xD9\xDA\x07u\x02" +
		"\x02\xDA\xDB\x07v\x02\x02\xDB\xDC\x07q\x02\x02\xDC\xDD\x07r\x02\x02\xDD" +
		"0\x03\x02\x02\x02\xDE\xDF\x07v\x02\x02\xDF\xE0\x07t\x02\x02\xE0\xE1\x07" +
		"c\x02\x02\xE1\xE2\x07k\x02\x02\xE2\xE3\x07p\x02\x02\xE32\x03\x02\x02\x02" +
		"\xE4\xE5\x07v\x02\x02\xE5\xE6\x07t\x02\x02\xE6\xE7\x07c\x02\x02\xE7\xE8" +
		"\x07h\x02\x02\xE8\xE9\x07h\x02\x02\xE9\xEA\x07k\x02\x02\xEA\xEB\x07e\x02" +
		"\x02\xEB4\x03\x02\x02\x02\xEC\xED\x07d\x02\x02\xED\xEE\x07w\x02\x02\xEE" +
		"\xEF\x07u\x02\x02\xEF6\x03\x02\x02\x02\xF0\xF1\x07u\x02\x02\xF1\xF2\x07" +
		"k\x02\x02\xF2\xF3\x07i\x02\x02\xF3\xF4\x07p\x02\x02\xF48\x03\x02\x02\x02" +
		"\xF5\xF6\x07n\x02\x02\xF6\xF7\x07k\x02\x02\xF7\xF8\x07i\x02\x02\xF8\xF9" +
		"\x07j\x02\x02\xF9\xFA\x07v\x02\x02\xFA:\x03\x02\x02\x02\xFB\xFC\x07Q\x02" +
		"\x02\xFC\xFD\x07W\x02\x02\xFD\xFE\x07V\x02\x02\xFE\xFF\x07R\x02\x02\xFF" +
		"\u0100\x07W\x02\x02\u0100\u0101\x07V\x02\x02\u0101<\x03\x02\x02\x02\u0102" +
		"\u0103\x07G\x02\x02\u0103\u0104\x07P\x02\x02\u0104\u0105\x07F\x02\x02" +
		"\u0105\u0106\x07a\x02\x02\u0106\u0107\x07Q\x02\x02\u0107\u0108\x07W\x02" +
		"\x02\u0108\u0109\x07V\x02\x02\u0109\u010A\x07R\x02\x02\u010A\u010B\x07" +
		"W\x02\x02\u010B\u010C\x07V\x02\x02\u010C>\x03\x02\x02\x02\u010D\u010E" +
		"\x07G\x02\x02\u010E\u010F\x07P\x02\x02\u010F\u0110\x07F\x02\x02\u0110" +
		"\u0111\x07a\x02\x02\u0111\u0112\x07F\x02\x02\u0112\u0113\x07G\x02\x02" +
		"\u0113\u0114\x07H\x02\x02\u0114\u0115\x07K\x02\x02\u0115\u0116\x07P\x02" +
		"\x02\u0116\u0117\x07K\x02\x02\u0117\u0118\x07V\x02\x02\u0118\u0119\x07" +
		"K\x02\x02\u0119\u011A\x07Q\x02\x02\u011A\u011B\x07P\x02\x02\u011B\u011C" +
		"\x07U\x02\x02\u011C@\x03\x02\x02\x02\u011D\u011E\x07N\x02\x02\u011E\u011F" +
		"\x07Q\x02\x02\u011F\u0120\x07Q\x02\x02\u0120\u0121\x07R\x02\x02\u0121" +
		"B\x03\x02\x02\x02\u0122\u0123\x07G\x02\x02\u0123\u0124\x07P\x02\x02\u0124" +
		"\u0125\x07F\x02\x02\u0125\u0126\x07a\x02\x02\u0126\u0127\x07N\x02\x02" +
		"\u0127\u0128\x07Q\x02\x02\u0128\u0129\x07Q\x02\x02\u0129\u012A\x07R\x02" +
		"\x02\u012AD\x03\x02\x02\x02\u012B\u012C\x07K\x02\x02\u012C\u012D\x07H" +
		"\x02\x02\u012DF\x03\x02\x02\x02\u012E\u012F\x07G\x02\x02\u012F\u0130\x07" +
		"N\x02\x02\u0130\u0131\x07U\x02\x02\u0131\u0132\x07G\x02\x02\u0132\u0133" +
		"\x07\"\x02\x02\u0133\u0134\x07K\x02\x02\u0134\u0135\x07H\x02\x02\u0135" +
		"H\x03\x02\x02\x02\u0136\u0137\x07G\x02\x02\u0137\u0138\x07N\x02\x02\u0138" +
		"\u0139\x07U\x02\x02\u0139\u013A\x07G\x02\x02\u013AJ\x03\x02\x02\x02\u013B" +
		"\u013C\x07V\x02\x02\u013C\u013D\x07J\x02\x02\u013D\u013E\x07G\x02\x02" +
		"\u013E\u013F\x07P\x02\x02\u013FL\x03\x02\x02\x02\u0140\u0141\x07G\x02" +
		"\x02\u0141\u0142\x07P\x02\x02\u0142\u0143\x07F\x02\x02\u0143\u0144\x07" +
		"a\x02\x02\u0144\u0145\x07K\x02\x02\u0145\u0146\x07H\x02\x02\u0146N\x03" +
		"\x02\x02\x02\u0147\u0148\x07E\x02\x02\u0148\u0149\x07C\x02\x02\u0149\u014A" +
		"\x07P\x02\x02\u014A\u014B\x07X\x02\x02\u014B\u014C\x07C\x02\x02\u014C" +
		"\u014D\x07U\x02\x02\u014DP\x03\x02\x02\x02\u014E\u014F\x07U\x02\x02\u014F" +
		"\u0150\x07K\x02\x02\u0150\u0151\x07\\\x02\x02\u0151\u0152\x07G\x02\x02" +
		"\u0152R\x03\x02\x02\x02\u0153\u0154\x07d\x02\x02\u0154\u0155\x07{\x02" +
		"\x02\u0155T\x03\x02\x02\x02\u0156\u0158\t\x04\x02\x02\u0157\u0156\x03" +
		"\x02\x02\x02\u0158\u0159\x03\x02\x02\x02\u0159\u0157\x03\x02\x02\x02\u0159" +
		"\u015A\x03\x02\x02\x02\u015AV\x03\x02\x02\x02\u015B\u015C\x07/\x02\x02" +
		"\u015C\u015D\x05U+\x02\u015DX\x03\x02\x02\x02\u015E\u015F\x07v\x02\x02" +
		"\u015F\u0160\x07t\x02\x02\u0160\u0161\x07w\x02\x02\u0161\u0162\x07g\x02" +
		"\x02\u0162Z\x03\x02\x02\x02\u0163\u0164\x07h\x02\x02\u0164\u0165\x07c" +
		"\x02\x02\u0165\u0166\x07n\x02\x02\u0166\u0167\x07u\x02\x02\u0167\u0168" +
		"\x07g\x02\x02\u0168\\\x03\x02\x02\x02\u0169\u0177\x04,1\x02\u016A\u016B" +
		"\x07?\x02\x02\u016B\u0177\x07?\x02\x02\u016C\u0177\t\x05\x02\x02\u016D" +
		"\u016E\x07@\x02\x02\u016E\u0177\x07?\x02\x02\u016F\u0170\x07>\x02\x02" +
		"\u0170\u0177\x07?\x02\x02\u0171\u0172\x07C\x02\x02\u0172\u0173\x07P\x02" +
		"\x02\u0173\u0177\x07F\x02\x02\u0174\u0175\x07Q\x02\x02\u0175\u0177\x07" +
		"T\x02\x02\u0176\u0169\x03\x02\x02\x02\u0176\u016A\x03\x02\x02\x02\u0176" +
		"\u016C\x03\x02\x02\x02\u0176\u016D\x03\x02\x02\x02\u0176\u016F\x03\x02" +
		"\x02\x02\u0176\u0171\x03\x02\x02\x02\u0176\u0174\x03\x02\x02\x02\u0177" +
		"^\x03\x02\x02\x02\u0178\u0179\x055\x1B\x02\u0179\u017A\x05\x03\x02\x02" +
		"\u017A\u017B\x05/\x18\x02\u017B`\x03\x02\x02\x02\u017C\u017D\x05/\x18" +
		"\x02\u017D\u017E\x05\x03\x02\x02\u017E\u017F\x057\x1C\x02\u017Fb\x03\x02" +
		"\x02\x02\u0180\u0181\x053\x1A\x02\u0181\u0182\x05\x03\x02\x02\u0182\u0183" +
		"\x059\x1D\x02\u0183d\x03\x02\x02\x02\u0184\u0185\x051\x19\x02\u0185\u0186" +
		"\x05\x03\x02\x02\u0186\u0187\x05/\x18\x02\u0187f\x03\x02\x02\x02\u0188" +
		"\u0189\x05O(\x02\u0189\u018A\x05\x03\x02\x02\u018A\u018B\x05Q)\x02\u018B" +
		"h\x03\x02\x02\x02\u018C\u0190\t\x06\x02\x02\u018D\u018F\t\x07\x02\x02" +
		"\u018E\u018D\x03\x02\x02\x02\u018F\u0192\x03\x02\x02\x02\u0190\u018E\x03" +
		"\x02\x02\x02\u0190\u0191\x03\x02\x02\x02\u0191j\x03\x02\x02\x02\u0192" +
		"\u0190\x03\x02\x02\x02\x07\x02n\u0159\u0176\u0190\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MapGeneratorLexer.__ATN) {
			MapGeneratorLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(MapGeneratorLexer._serializedATN));
		}

		return MapGeneratorLexer.__ATN;
	}

}

